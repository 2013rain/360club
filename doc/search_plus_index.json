{"./":{"url":"./","title":"Introduction","keywords":"","body":"我的主页 基本信息 我的介绍 喜欢写代码，PHP、Golang均可以。也喜欢看纸质的书。目前再看《熵增定律》. 附上简历一份链接 本站架构 当前项目纯由MarkDown语法编写。 （gitbook?pdf？do it you want to do） 个人业余爱好 散步 乒乓球 棋牌（三国杀、象棋、五子棋、围棋） 骑行（2轮摩托走在乡间小路） 遛娃 目录 个人历史 记录 1. 1989年5月出生于河南新乡封丘县 2. 2009年7月高中毕业 2. 2012年10月来北京首次参加工作 3. 2013年7月毕业于河南大学 4. 2015年11月结婚 5. 2017年8月大女儿出生 6. 2020年9月小女儿出生 "},"HOME.html":{"url":"HOME.html","title":"主页","keywords":"","body":"我的主页 基本信息 介绍 喜欢写代码，PHP、Golang均可以。也喜欢看纸质的书。目前再看《熵增定律》. 附上简历一份链接 本站架构 当前项目纯由MarkDown语法编写。 （gitbook?pdf？do it you want to do） 个人业余爱好 散步 乒乓球 棋牌（三国杀、象棋、五子棋、围棋） 骑行（2轮摩托走在乡间小路） 遛娃 "},"golang/gmp.html":{"url":"golang/gmp.html","title":"gmp模型","keywords":"","body":"了解Go的GMP模型 前提 想要了解go的GMP是什么，需要先弄清楚一些基础概念。 进程 What?——进程（Process）是是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。所有与该进程有关的资源，都被记录在进程控制块PCB（Processing Control Block）中。以表示该进程拥有这些资源或正在使用它们。 PCB是系统感知进程存在的唯一标志，系统用它来记录进程的外部特征，描述进程的运动变化过程。通常记载进程之相关信息，包括： （1）程序计数器：接着要运行的指令地址。 （2）进程状态：可以是new、ready、running、waiting或 blocked等。 （3）CPU暂存器：如累加器、索引暂存器（Index register）、堆栈指针以及一般用途暂存器、状况代码等，主要用途在于中断时暂时存储数据，以便稍后继续利用；其数量及类因电脑架构有所差异。 （4）CPU排班法：优先级、排班队列等指针以及其他参数。 （5）存储器管理：如标签页表等。 （6）会计信息：如CPU与实际时间之使用数量、时限、账号、工作或进程号码。 （7）输入输出状态：配置进程使用I/O设备，如磁带机。 它可以申请和拥有系统资源，是一个动态的概念，是一个活动的实体。与程序对比，程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念；在传统的操作系统中，程序并不能独立运行，作为资源分配和独立运行的基本单元都是进程。进程也是抢占处理机的调度单位。 进行进程切换就是从正在运行的进程中收回处理器，然后再使待运行进程来占用处理器。在切换时，一个进程存储在处理器各寄存器中的中间数据叫做进程的上下文，所以进程的 切换实质上就是被中止运行进程与待运行进程上下文的切换。在进程未占用处理器时，进程 的上下文是存储在进程的私有堆栈中的。 运行中的进程可能具有以下三种基本状态：就绪状态（Ready）、运行状态(Running)、阻塞状态(Blocked)。 线程 What?——线程（Threads）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务，每个线程都是作为利用CPU的基本单位，是花费最小开销的实体。 在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。 同一进程中的多条线程将共享该进程中的全部系统资源，一个进程可以有很多线程，每条线程并行执行不同的任务。 Why?——引入线程的原因：一是由于进程是资源拥有者，创建、撤消与切换存在较大的时空开销，因此需要引入轻型进程；二是由于对称多处理机（Symmetrical Multi-Processing简称SMP）出现，可以满足多个运行单位，而多个进程并行开销过大。 线程具有以下属性：轻型实体、独立调度和分派的基本单位、可并发执行、共享进程资源。 线程的实体包括程序、数据和TCB。线程是动态概念，它的动态特性由线程控制块TCB（Thread Control Block）描述。 TCB包括以下信息： （1）线程状态。 （2）当线程不运行时，被保存的现场资源。 （3）一组执行堆栈。 （4）存放每个线程的局部变量主存区。 （5）访问同一个进程中的主存和其它资源。 协程（以goroutine为例子） 轻量级线程（goroutine）是Go语言提供的一种用户态线程，有时我们也称之为协程。但是它比线程更小，十几个goroutine可能体现在底层就是五六个线程，Go语言内部实现了这些goroutine之间的内存共享。执行goroutine只需极少的栈内存(大概是4~5KB)，当然会根据相应的数据伸缩。也正因为如此，可同时运行成千上万个并发任务。goroutine比thread更易用、更高效、更轻便 多个线程相对独立，有自己的上下文，切换受系统控制；而协程也相对独立，有自己的上下文，但是其切换由自己控制，由当前协程切换到其他协程由当前协程来控制。 差异： ​ 进程：拥有自己独立的堆和栈，既不共享堆，亦不共享栈，进程由操作系统调度。线程：拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度。协程 :和线程一样共享堆，不共享栈，协程由程序员在协程的代码里显示调度。 栈(stack)：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。栈使用的是一级缓存， 他们通常都是被调用时处于存储空间中，调用完毕立即释放。是一种先进后出的数据结构。栈的优势是，存取速度比堆要快，仅次于直接位于CPU中的寄存器。 堆(heap)： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS（操作系统）回收，分配方式倒是类似于链表。堆则是存放在二级缓存中，生命周期由虚拟机的垃圾回收算法来决定（并不是一旦成为孤儿对象就能被回收）。所以调用这些对象的速度要相对来得低一些。堆可以被看成是一棵树（数据结构Tree）,可以动态地分配内存大小，生存期也不必事先告诉编译器，要在运行时动态分配内存，所以存取速度较慢（对比栈）。 资源调度 GMP "}}